import tkinter as tk
import random


class GameObject:
    def __init__(self, canvas, item):
        self.canvas = canvas
        self.item = item

    def get_position(self):
        return self.canvas.coords(self.item)

    def move(self, x, y):
        self.canvas.move(self.item, x, y)

    def delete(self):
        self.canvas.delete(self.item)


class Ball(GameObject):
    def __init__(self, canvas, x, y, speed):
        self.radius = 10
        self.direction = [1, -1]
        self.speed = speed
        item = canvas.create_oval(x - self.radius, y - self.radius,
                                  x + self.radius, y + self.radius,
                                  fill='white')
        super().__init__(canvas, item)

    def update(self):
        coords = self.get_position()
        width = self.canvas.winfo_width()
        if coords[0] <= 0 or coords[2] >= width:
            self.direction[0] *= -1
        if coords[1] <= 0:
            self.direction[1] *= -1
        self.move(self.direction[0] * self.speed, self.direction[1] * self.speed)

    def collide(self, objects):
        coords = self.get_position()
        x = (coords[0] + coords[2]) * 0.5
        if len(objects) > 1:
            self.direction[1] *= -1
        elif len(objects) == 1:
            obj_coords = objects[0].get_position()
            if x > obj_coords[2]:
                self.direction[0] = 1
            elif x < obj_coords[0]:
                self.direction[0] = -1
            else:
                self.direction[1] *= -1
        for obj in objects:
            if isinstance(obj, Brick):
                obj.hit()


class Paddle(GameObject):
    def __init__(self, canvas, x, y):
        self.width = 100
        self.height = 10
        self.ball = None
        item = canvas.create_rectangle(x - self.width / 2, y - self.height / 2,
                                       x + self.width / 2, y + self.height / 2,
                                       fill='#FF5733')
        super().__init__(canvas, item)

    def set_ball(self, ball):
        self.ball = ball

    def move(self, offset):
        coords = self.get_position()
        width = self.canvas.winfo_width()
        if 0 <= coords[0] + offset and coords[2] + offset <= width:
            super().move(offset, 0)
            if self.ball is not None:
                self.ball.move(offset, 0)


class Brick(GameObject):
    COLORS = {1: '#FFBD33', 2: '#C70039', 3: '#900C3F'}

    def __init__(self, canvas, x, y, hits):
        self.width = 75
        self.height = 20
        self.hits = hits
        color = Brick.COLORS[hits]
        item = canvas.create_rectangle(x - self.width / 2, y - self.height / 2,
                                       x + self.width / 2, y + self.height / 2,
                                       fill=color, tags='brick')
        super().__init__(canvas, item)

    def hit(self):
        self.hits -= 1
        if self.hits <= 0:
            self.delete()
        else:
            self.canvas.itemconfig(self.item, fill=Brick.COLORS[self.hits])


class Game(tk.Frame):
    def __init__(self, master):
        super().__init__(master)
        self.lives = 3
        self.level = 1
        self.score = 0
        self.width = 610
        self.height = 400
        self.canvas = tk.Canvas(self, bg='#2C3E50', width=self.width, height=self.height)
        self.canvas.pack()
        self.pack()

        self.items = {}
        self.ball = None
        self.paddle = Paddle(self.canvas, self.width / 2, 350)
        self.items[self.paddle.item] = self.paddle

        self.hud = None
        self.create_hud()
        self.setup_level()

        self.canvas.focus_set()
        self.canvas.bind('<Left>', lambda _: self.paddle.move(-20))
        self.canvas.bind('<Right>', lambda _: self.paddle.move(20))
        self.canvas.bind('<space>', lambda _: self.start_game())

    def create_hud(self):
        self.hud = self.canvas.create_text(300, 20, text='', font=('Helvetica', 14), fill='white')
        self.update_hud()

    def update_hud(self):
        self.canvas.itemconfig(self.hud, text=f'Lives: {self.lives}  Score: {self.score}  Level: {self.level}')

    def setup_level(self):
        self.add_ball()
        self.create_bricks()

    def create_bricks(self):
        for x in range(5, self.width - 5, 75):
            for y in range(50, 110, 20):
                hits = random.randint(1, 3)
                brick = Brick(self.canvas, x + 37.5, y, hits)
                self.items[brick.item] = brick

    def add_ball(self):
        if self.ball is not None:
            self.ball.delete()
        paddle_coords = self.paddle.get_position()
        x = (paddle_coords[0] + paddle_coords[2]) * 0.5
        self.ball = Ball(self.canvas, x, 330, speed=5 + self.level)
        self.paddle.set_ball(self.ball)

    def start_game(self):
        self.canvas.unbind('<space>')
        self.paddle.ball = None
        self.run_game()

    def run_game(self):
        self.check_collisions()
        if len(self.canvas.find_withtag('brick')) == 0:
            self.level += 1
            self.setup_level()
        elif self.ball.get_position()[3] >= self.height:
            self.lives -= 1
            if self.lives <= 0:
                self.end_game("Game Over")
            else:
                self.setup_level()
        else:
            self.ball.update()
            self.after(50, self.run_game)

    def check_collisions(self):
        ball_coords = self.ball.get_position()
        overlapping = self.canvas.find_overlapping(*ball_coords)
        objects = [self.items[obj] for obj in overlapping if obj in self.items]
        self.ball.collide(objects)
        for obj in objects:
            if isinstance(obj, Brick):
                self.score += 10
        self.update_hud()

    def end_game(self, message):
        self.canvas.create_text(300, 200, text=message, font=('Helvetica', 30), fill='red')


if __name__ == '__main__':
    root = tk.Tk()
    root.title("Break the Bricks!")
    game = Game(root)
    game.mainloop()
